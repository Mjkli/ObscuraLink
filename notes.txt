


Notes for reference when i need to look at a different part. 

# - Architecture
Main controller - Final steps not needed at first
 - Node to hold all nodes info.
 - When requested for node id it should return public IP and public key of said node
 - When a new node starts it should get their public IP and send it to the main controller

Nodes
   - ( Proxy Servers with encryption steps ) 
   - Nodes should be ablet to receive a packet encrypt the packet and send it to the next node in the chain.
        - When it gets a response it should be able to encrypt said packet and send it back to the node before.
        - once the messages gets back to the original sender they should be able to decrypt the message with all the keys. 

        computer -->(request)Encrypted with all keys in sequence --> (Entry Node) decrypt its layer --> (Node) decrypt its layer --> (exit Node) decrypt its layer: packet is unencrypted here --> webpage.

Client:
    - Construct a random list of node path (atleast 3)
    - Get request to a website from a user
    -  


todo:

 x capture packets from network
 x send packets to network

 - test on pis
    test should be for the node in the middle to take a packet from one interface and forward it to the reciver
    Sender pi -> Node -> reciver pi

 - Setup Key sharing between nodes
 - Setup encryption / decryption of packets.
 - Pis should be able to send keys to eachother then the sender should be able to encrypt its packet then the reciver should be able to decrypt the packet.







 - Establish node service and client service. 
 - Client does key share loop (private / public key)  to send AES key / info to decrypt the incoming packets.



 - Start thinking on what http client to use so i can create the client software




 Process flow:
  - client reaches out to the nodes to get their keys.
  - client sends each key their own AES key
  - client encrypts the data in the order of the nodes using the AES keys.
  - client sends the data to the first node
  - Nodes forward it on until it makes the http request to the requested site.
  - Site responds
  - nodes will Add their AES key to the responded message and send it back to their node chain.
  - Once the encrypted message gets back to the client, the client un-encrypts all the layers and views the data
